@use 'sass:map';
@use 'color' as c;
@use 'radius' as r;
@use 'typography' as t;

$typographies: (
  'sm': t.$button-xs,
  'md': t.$button-sm,
  'lg': t.$button-md,
);

// paddings are 1px less due to border
$sizes: (
  'sm': (
    'padding': 3px 23px,
    'icon-font-size': 12px,
    'icon-padding': 9px,
  ),
  'md': (
    'padding': 7px 23px,
    'icon-font-size': 16px,
    'icon-padding': 11px,
  ),
  'lg': (
    'padding': 11px 23px,
    'icon-font-size': 16px,
    'icon-padding': 15px,
  ),
);

$colors: (
  'default': 'primary',
  'success': 'success',
  'destructive': 'error',
);

:host {
  @include r.radius(r.$xs);
  @include t.attributeToTypography($typographies, 'size');

  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  border-width: 1px;
  border-style: solid;
  cursor: pointer;

  &:focus {
    outline: 1px solid c.color('info', 500);
  }

  &:disabled {
    cursor: not-allowed;
    outline: none;
  }

  @each $size, $config in $sizes {
    &[size='#{$size}'] {
      padding: map.get($config, 'padding');

      &[laiIconButton] {
        --icon-button-font-size: #{map.get($config, 'icon-font-size')};

        padding: map.get($config, 'icon-padding');
      }
    }
  }

  &[hierarchy='primary'] {
    @each $buttonColor, $paletteColor in $colors {
      &[color='#{$buttonColor}'] {
        color: c.$white;
        background-color: c.color($paletteColor, 500);
        border-color: c.color($paletteColor, 500);

        &:focus {
          background-color: c.color($paletteColor, 400);
          border-color: c.color($paletteColor, 400);
        }

        &:hover {
          background-color: c.color($paletteColor, 600);
          border-color: c.color($paletteColor, 600);
        }

        &:active {
          background-color: c.color($paletteColor, 700);
          border-color: c.color($paletteColor, 700);
        }

        &:disabled {
          background-color: c.color($paletteColor, 200);
          border-color: c.color($paletteColor, 200);
        }
      }
    }
  }

  &[hierarchy='secondary'] {
    @each $buttonColor, $paletteColor in $colors {
      &[color='#{$buttonColor}'] {
        color: c.color($paletteColor, 500);
        background-color: transparent;
        border-color: c.color($paletteColor, 500);

        &:focus {
          background-color: c.color($paletteColor, 100);
        }

        &:hover {
          background-color: c.color($paletteColor, 50);
        }

        &:active {
          background-color: c.color($paletteColor, 200);
        }

        &:disabled {
          color: c.color($paletteColor, 200);
          background-color: transparent;
          border-color: c.color($paletteColor, 200);
        }
      }
    }
  }

  &[hierarchy='tertiary'] {
    @each $buttonColor, $paletteColor in $colors {
      &[color='#{$buttonColor}'] {
        color: c.color($paletteColor, 500);
        background-color: transparent;
        border-color: transparent;

        &:hover {
          color: c.color($paletteColor, 600);
        }

        &:active {
          color: c.color($paletteColor, 700);
        }

        &:disabled {
          color: c.color($paletteColor, 200);
        }
      }
    }
  }
}
