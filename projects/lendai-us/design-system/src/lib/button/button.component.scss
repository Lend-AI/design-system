@use 'sass:map';
@use 'color' as c;
@use 'typography' as t;

$typographies: (
  'lg': (
    'desktop': (
      'font-size': 1rem,
      'line-height': 1.5rem,
    ),
    'mobile': (
      'font-size': 0.75rem,
      'line-height': 1.125rem,
    ),
  ),
  'md': (
    'desktop': (
      'font-size': 0.875rem,
      'line-height': 1.25rem,
    ),
    'mobile': (
      'font-size': 0.75rem,
      'line-height': 1.125rem,
    ),
  ),
  'sm': (
    'desktop': (
      'font-size': 0.75rem,
      'line-height': 1.125rem,
    ),
    'mobile': (
      'font-size': 0.75rem,
      'line-height': 1.125rem,
    ),
  ),
);

// paddings are 1px less due to border
$sizes: (
  'sm': (
    'padding-y': 7px,
    'padding-x': 11px,
  ),
  'md': (
    'padding-y': 9px,
    'padding-x': 15px,
  ),
  'lg': (
    'padding-y': 11px,
    'padding-x': 19px,
  ),
);

$colors: ('primary', 'error', 'success', 'gray');

:host {
  @include t.attributeToTypography($typographies, 'size');

  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  border-width: 1px;
  border-style: solid;
  cursor: pointer;
  font-weight: 500;
  border-radius: 4px;

  &:focus {
    outline: 1px solid c.color('info', 500);
    outline-offset: 1px;
  }

  &:disabled {
    cursor: not-allowed;
    outline: none;
  }

  @each $size, $config in $sizes {
    &[size='#{$size}'] {
      padding: map.get($config, 'padding-y') map.get($config, 'padding-x');

      &[laiIconButton] {
        padding: map.get($config, 'padding-y');

        &[hierarchy='tertiary'] {
          padding: 0;
        }
      }
    }
  }

  &[hierarchy='primary'] {
    @each $color in $colors {
      &[color='#{$color}'] {
        color: c.$white;
        background-color: c.color($color, 500);
        border-color: c.color($color, 500);

        &:hover:not(:disabled) {
          background-color: c.color($color, 600);
          border-color: c.color($color, 600);
        }

        &:active:not(:disabled) {
          background-color: c.color($color, 700);
          border-color: c.color($color, 700);
        }

        &:disabled {
          color: c.color('gray', 300);
          background-color: c.color('gray', 100);
          border-color: c.color('gray', 100);
        }
      }
    }
  }

  &[hierarchy='secondary'] {
    @each $color in $colors {
      &[color='#{$color}'] {
        color: c.color($color, 500);
        background-color: c.$white;
        border-color: c.color($color, 500);

        &:hover:not(:disabled) {
          color: c.$white;
          background-color: c.color($color, 600);
          border-color: c.color($color, 600);
        }

        &:active:not(:disabled) {
          color: c.$white;
          background-color: c.color($color, 700);
          border-color: c.color($color, 700);
        }

        &:disabled {
          color: c.color('gray', 300);
          background-color: c.$white;
          border-color: c.color('gray', 100);
        }
      }
    }
  }

  &[hierarchy='tertiary'] {
    padding: 0;

    @each $color in $colors {
      &[color='#{$color}'] {
        color: c.color($color, 500);
        background-color: transparent;
        border-color: transparent;

        &:disabled {
          color: c.color('gray', 300);
        }
      }
    }
  }
}
